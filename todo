#!/bin/bash
# AI Chat Terminal - Smart GitHub Issue Creator
# Creates GitHub issues from German/English input with AI analysis
#
# Usage:
#   ./todo "Single line issue description"
#   ./todo     (then enter multiline text, end with Ctrl+D)
#
# Features:
# - Supports multiline text and special characters
# - AI analyzes and categorizes issues automatically
# - Translates German input to English
# - Creates professional GitHub issues with proper labels

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RESET='\033[0m'

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo -e "${RED}Error: Must be run inside a git repository${RESET}"
    exit 1
fi

# Check if gh CLI is available
if ! command -v gh &> /dev/null; then
    echo -e "${RED}Error: GitHub CLI (gh) is not installed${RESET}"
    echo "Install with: brew install gh"
    exit 1
fi

# Check if authenticated with GitHub
if ! gh auth status >/dev/null 2>&1; then
    echo -e "${RED}Error: Not authenticated with GitHub${RESET}"
    echo "Run: gh auth login"
    exit 1
fi

# Get user input - handle multiline text and special characters
if [ $# -eq 0 ]; then
    echo -e "${YELLOW}üìù Enter your idea or bug report (end with Ctrl+D on empty line):${RESET}"
    echo -e "${BLUE}Supports multiline text and special characters${RESET}"
    echo ""

    # Read multiline input until EOF (Ctrl+D)
    USER_INPUT=$(cat)

    if [ -z "$USER_INPUT" ]; then
        echo -e "${RED}Error: No input provided${RESET}"
        exit 1
    fi
else
    # Use command line arguments if provided
    USER_INPUT="$*"
fi

# Get OpenAI API key from AI Chat Terminal config
AICHAT_DIR="$HOME/.aichat"
ENV_FILE="$AICHAT_DIR/.env"

if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}Error: OpenAI API key not found${RESET}"
    echo "Please set up AI Chat Terminal first with: chat"
    exit 1
fi

# Source the .env file to get OPENAI_API_KEY
source "$ENV_FILE"

if [ -z "$OPENAI_API_KEY" ]; then
    echo -e "${RED}Error: OPENAI_API_KEY not found in $ENV_FILE${RESET}"
    exit 1
fi

echo -e "${BLUE}ü§ñ Analyzing your input with AI...${RESET}"

# Escape user input for JSON
USER_INPUT_ESCAPED=$(echo "$USER_INPUT" | jq -R -s .)

# Create AI prompt for analysis
AI_PROMPT="You are a GitHub issue assistant. Analyze the following user input and create a professional GitHub issue.

Instructions:
1. If the input is in German, translate to English
2. Determine the issue type: bug, enhancement, documentation, or question
3. Assess priority: low, medium, high, or critical
4. Create a clear, professional title (max 50 chars)
5. Write a detailed body with Description, Use Case, and Technical Details if applicable
6. Suggest appropriate labels from: bug, enhancement, documentation, question, priority-high, priority-medium, priority-low, priority-critical, memory-system, ui-ux, performance, security

User input: $USER_INPUT_ESCAPED

Respond ONLY with valid JSON in this exact format:
{
  \"title\": \"Clear issue title\",
  \"body\": \"## Description\\n\\nDetailed description here\\n\\n## Use Case\\n\\nWhy this matters\\n\\n## Technical Details\\n\\nImplementation notes if applicable\",
  \"labels\": [\"label1\", \"label2\", \"label3\"],
  \"type\": \"bug|enhancement|documentation|question\",
  \"priority\": \"low|medium|high|critical\"
}"

# Call OpenAI API
RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -H "Content-Type: application/json" \
  -d "{
    \"model\": \"gpt-4o-mini\",
    \"messages\": [
      {
        \"role\": \"system\",
        \"content\": \"You are a helpful assistant that creates GitHub issues. Always respond with valid JSON only.\"
      },
      {
        \"role\": \"user\",
        \"content\": $(echo "$AI_PROMPT" | jq -R -s .)
      }
    ],
    \"temperature\": 0.3,
    \"max_tokens\": 800
  }")

# Check if API call was successful
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Failed to call OpenAI API${RESET}"
    exit 1
fi

# Extract the content from the API response
AI_CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')

if [ -z "$AI_CONTENT" ]; then
    echo -e "${RED}Error: No response from OpenAI API${RESET}"
    echo "API Response: $RESPONSE"
    exit 1
fi

# Parse the AI response JSON
TITLE=$(echo "$AI_CONTENT" | jq -r '.title // empty')
BODY=$(echo "$AI_CONTENT" | jq -r '.body // empty')
LABELS=$(echo "$AI_CONTENT" | jq -r '.labels[]? // empty' | tr '\n' ',' | sed 's/,$//')
TYPE=$(echo "$AI_CONTENT" | jq -r '.type // "enhancement"')
PRIORITY=$(echo "$AI_CONTENT" | jq -r '.priority // "medium"')

# Validate required fields
if [ -z "$TITLE" ] || [ -z "$BODY" ]; then
    echo -e "${RED}Error: AI failed to generate proper issue format${RESET}"
    echo "AI Response: $AI_CONTENT"
    exit 1
fi

# Display what will be created
echo -e "${YELLOW}üìù Creating GitHub issue:${RESET}"
echo -e "${GREEN}Title:${RESET} $TITLE"
echo -e "${GREEN}Type:${RESET} $TYPE"
echo -e "${GREEN}Priority:${RESET} $PRIORITY"
echo -e "${GREEN}Labels:${RESET} $LABELS"
echo ""

# Create the GitHub issue
if [ -n "$LABELS" ]; then
    ISSUE_URL=$(gh issue create --title "$TITLE" --body "$BODY" --label "$LABELS")
else
    ISSUE_URL=$(gh issue create --title "$TITLE" --body "$BODY")
fi

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Issue created successfully!${RESET}"
    echo -e "${BLUE}üîó $ISSUE_URL${RESET}"

    # Extract issue number from URL
    ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -o '[0-9]\+$')
    echo -e "${YELLOW}üí° You can view it with: gh issue view $ISSUE_NUMBER${RESET}"
else
    echo -e "${RED}‚ùå Failed to create GitHub issue${RESET}"
    exit 1
fi