#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Local Storage Detector - Minimal Keyword System (v9.0.0)
Fast keyword detection to trigger Phi-3 intent analysis
Only 8 keywords per language - Phi-3 does the intelligent work
"""

from typing import Tuple, List

# Minimal keywords for "database intent" - just 8 per language
# Phi-3 will do the intelligent classification and false-positive detection
DB_INTENT_KEYWORDS = {
    'de': [
        'db', 'datenbank', 'lokal', 'speicher', 'speichern', 'merke', 'hole', 'gespeichert'
    ],
    'en': [
        'db', 'database', 'local', 'storage', 'save', 'remember', 'get', 'stored'
    ],
    'es': [
        'db', 'base de datos', 'local', 'guarda', 'guardar', 'recuerda', 'muestra', 'guardado'
    ],
    'fr': [
        'db', 'base de donn√©es', 'local', 'stockage', 'sauvegarde', 'souviens', 'r√©cup√®re', 'enregistr√©'
    ],
    'it': [
        'db', 'database', 'locale', 'archivio', 'salva', 'ricorda', 'mostra', 'salvato'
    ],
    'pt': [
        'db', 'base de dados', 'local', 'armazenamento', 'salvar', 'lembrar', 'mostrar', 'salvo'
    ],
    'nl': [
        'db', 'database', 'lokaal', 'opslag', 'opslaan', 'onthoud', 'haal', 'opgeslagen'
    ],
    'pl': [
        'db', 'baza danych', 'lokalnie', 'pamiƒôƒá', 'zapisz', 'zapamiƒôtaj', 'poka≈º', 'zapisane'
    ],
    'ru': [
        '–±–¥', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–ª–æ–∫–∞–ª—å–Ω–æ', '—Ö—Ä–∞–Ω–∏–ª–∏—â–µ', '—Å–æ—Ö—Ä–∞–Ω–∏', '–∑–∞–ø–æ–º–Ω–∏', '–ø–æ–∫–∞–∂–∏', '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
    ],
    'ja': [
        'db', '„Éá„Éº„Çø„Éô„Éº„Çπ', '„É≠„Éº„Ç´„É´', '„Çπ„Éà„É¨„Éº„Ç∏', '‰øùÂ≠ò', 'Ë¶ö„Åà„Å¶', 'ÂèñÂæó', '‰øùÂ≠ò„Åó„Åü'
    ],
    'zh': [
        'db', 'Êï∞ÊçÆÂ∫ì', 'Êú¨Âú∞', 'Â≠òÂÇ®', '‰øùÂ≠ò', 'ËÆ∞‰Ωè', 'ÊòæÁ§∫', 'Â∑≤‰øùÂ≠ò'
    ],
    'ko': [
        'db', 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§', 'Î°úÏª¨', 'Ï†ÄÏû•ÏÜå', 'Ï†ÄÏû•', 'Í∏∞ÏñµÌï¥', 'Î≥¥Ïó¨Ï§ò', 'Ï†ÄÏû•Îêú'
    ],
    'ar': [
        'db', 'ŸÇÿßÿπÿØÿ© ÿ®ŸäÿßŸÜÿßÿ™', 'ŸÖÿ≠ŸÑŸä', 'ÿ™ÿÆÿ≤ŸäŸÜ', 'ÿßÿ≠ŸÅÿ∏', 'ÿ™ÿ∞ŸÉÿ±', 'ÿ£ÿ∏Ÿáÿ±', 'ŸÖÿ≠ŸÅŸàÿ∏'
    ],
    'hi': [
        'db', '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏', '‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø', '‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡§£', '‡§∏‡§π‡•á‡§ú‡•á‡§Ç', '‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç', '‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç', '‡§∏‡§π‡•á‡§ú‡§æ'
    ],
    'tr': [
        'db', 'veritabanƒ±', 'yerel', 'depolama', 'kaydet', 'hatƒ±rla', 'g√∂ster', 'kaydedildi'
    ],
    'sv': [
        'db', 'databas', 'lokal', 'lagring', 'spara', 'kom ih√•g', 'visa', 'sparat'
    ],
    'da': [
        'db', 'database', 'lokal', 'lagring', 'gem', 'husk', 'vis', 'gemt'
    ],
    'fi': [
        'db', 'tietokanta', 'paikallinen', 'tallennus', 'tallenna', 'muista', 'n√§yt√§', 'tallennettu'
    ],
    'no': [
        'db', 'database', 'lokal', 'lagring', 'lagre', 'husk', 'vis', 'lagret'
    ]
}


class LocalStorageDetector:
    """Fast keyword detector to trigger Phi-3 intent analysis"""

    def __init__(self):
        """Initialize detector with minimal keyword dictionary"""
        self.keywords = DB_INTENT_KEYWORDS

    def detect_db_intent(self, text: str) -> Tuple[bool, List[str]]:
        """
        Quick check: Does text contain ANY database-related keyword?

        Args:
            text: User input message

        Returns:
            Tuple of (detected, matched_keywords)
            - detected: True if any keyword found
            - matched_keywords: List of keywords that matched
        """
        text_lower = text.lower()
        matched = []

        # Check all languages
        for lang, keywords in self.keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    matched.append(keyword)

        return (len(matched) > 0, matched)


# For testing
if __name__ == '__main__':
    detector = LocalStorageDetector()

    test_cases = [
        # Should trigger
        ("merke dir meine Email ist test@test.com", True),
        ("wie ist meine Telefonnummer?", False),  # No keyword!
        ("zeig mir was in der db gespeichert ist", True),
        ("hole meine Daten aus der Datenbank", True),
        ("save this locally", True),
        ("what's stored in the database?", True),

        # Should NOT trigger
        ("Wie ist das Wetter heute?", False),
        ("Was ist 2+2?", False),
        ("Tell me a joke", False),

        # Potential false positives (Phi-3 will filter)
        ("Was ist eine Datenbank?", True),  # Contains 'datenbank' but educational
        ("Ich habe das gestern in der DB gespeichert", True),  # Past tense
    ]

    print("üß™ Testing Minimal Keyword Detector (v9.0.0)\n")
    print("Note: False positives OK - Phi-3 will filter them!\n")

    for text, should_trigger in test_cases:
        detected, keywords = detector.detect_db_intent(text)
        status = "‚úÖ" if detected == should_trigger else "‚ö†Ô∏è"

        print(f"{status} '{text}'")
        print(f"   Detected: {detected}, Keywords: {keywords}")

        if detected and not should_trigger:
            print(f"   ‚ö†Ô∏è  False positive (Phi-3 will handle)")

        print()

    # Count total keywords
    total = sum(len(kw) for kw in DB_INTENT_KEYWORDS.values())
    print(f"\nüìä Total keywords: {total} ({len(DB_INTENT_KEYWORDS)} languages √ó ~8 keywords)")
    print(f"üöÄ Speedup vs v8.x: ~7.5√ó faster ({total} checks vs 1140 checks)")
