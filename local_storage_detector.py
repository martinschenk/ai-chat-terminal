#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Local Storage Detector - Expanded Keyword System (v9.0.1)
Fast keyword detection to trigger Phi-3 intent analysis
~12 keywords per language - covers all 5 operations (SAVE/RETRIEVE/DELETE/LIST/UPDATE)
"""

from typing import Tuple, List

# Expanded keywords for "database intent" - ~12 per language
# Covers all operations: SAVE, RETRIEVE, DELETE, LIST, UPDATE
# Phi-3 will do the intelligent classification and false-positive detection
DB_INTENT_KEYWORDS = {
    'de': [
        # DB/Storage
        'db', 'datenbank', 'lokal', 'speicher', 'speichern', 'speichere',
        # Save/Remember
        'merke', 'merk', 'merken', 'behalte', 'behalten', 'notiere', 'notieren',
        # Retrieve/Get
        'hole', 'hol', 'holen', 'gib', 'gibst', 'abrufen', 'laden',
        # Show/List
        'zeig', 'zeige', 'zeigen', 'liste', 'auflistung', 'anzeigen',
        # Delete/Forget
        'vergiss', 'vergessen', 'l√∂sche', 'l√∂schen', 'entferne', 'entfernen',
        # Data/Info
        'daten', 'infos', 'informationen', 'gespeichert', 'gespeicherte',
        # Question words
        'meine', 'mein', 'welche', 'was', 'hast', 'kennst', 'wei√üt'
    ],
    'en': [
        # DB/Storage
        'db', 'database', 'local', 'locally', 'storage', 'store', 'stored',
        # Save/Remember
        'save', 'saving', 'remember', 'remind', 'keep', 'keeping', 'note', 'noting',
        # Retrieve/Get
        'get', 'getting', 'retrieve', 'load', 'loading', 'fetch',
        # Show/List
        'show', 'showing', 'list', 'listing', 'display',
        # Delete/Forget
        'forget', 'delete', 'deleting', 'remove', 'removing', 'clear',
        # Data/Info
        'data', 'info', 'infos', 'information', 'entries', 'records',
        # Question words
        'my', 'mine', 'which', 'what', 'have', 'has', 'know', 'knows', 'about'
    ],
    'es': [
        # DB/Storage
        'db', 'base de datos', 'local', 'localmente', 'almacenamiento', 'almacenar',
        # Save/Remember
        'guarda', 'guardar', 'guardado', 'recuerda', 'recordar', 'anota', 'anotar', 'mant√©n', 'mantener',
        # Retrieve/Get
        'obt√©n', 'obtener', 'muestra', 'mostrar', 'dame', 'dar', 'recupera', 'recuperar',
        # Show/List
        'lista', 'listar', 'ens√©√±ame', 'ense√±ar', 'mu√©strame',
        # Delete/Forget
        'olvida', 'olvidar', 'elimina', 'eliminar', 'borra', 'borrar', 'quita', 'quitar',
        # Data/Info
        'datos', 'info', 'informaci√≥n', 'entradas', 'registros', 'guardados',
        # Question words
        'mi', 'mis', 'qu√©', 'cu√°l', 'cu√°les', 'tienes', 'tiene', 'sabes', 'conoces'
    ],
    'fr': [
        # DB/Storage
        'db', 'base de donn√©es', 'local', 'localement', 'stockage', 'stocker',
        # Save/Remember
        'sauvegarde', 'sauvegarder', 'enregistre', 'enregistrer', 'souviens', 'garde', 'garder', 'note', 'noter',
        # Retrieve/Get
        'r√©cup√®re', 'r√©cup√©rer', 'obtiens', 'obtenir', 'affiche', 'afficher', 'montre', 'montrer',
        # Show/List
        'liste', 'lister', 'affiche-moi', 'montre-moi',
        # Delete/Forget
        'oublie', 'oublier', 'supprime', 'supprimer', 'efface', 'effacer', 'enl√®ve', 'enlever',
        # Data/Info
        'donn√©es', 'infos', 'informations', 'entr√©es', 'enregistr√©', 'enregistr√©s',
        # Question words
        'mon', 'ma', 'mes', 'quel', 'quelle', 'quels', 'quelles', 'as', 'sais', 'connais'
    ],
    'it': [
        # DB/Storage
        'db', 'database', 'locale', 'localmente', 'archivio', 'memorizzazione', 'memorizza',
        # Save/Remember
        'salva', 'salvare', 'salvato', 'ricorda', 'ricordare', 'annota', 'annotare', 'mantieni', 'mantenere',
        # Retrieve/Get
        'prendi', 'prendere', 'recupera', 'recuperare', 'mostra', 'mostrare', 'dammi',
        # Show/List
        'lista', 'elenco', 'elenca', 'elencare', 'mostrami',
        # Delete/Forget
        'dimentica', 'dimenticare', 'elimina', 'eliminare', 'cancella', 'cancellare', 'rimuovi', 'rimuovere',
        # Data/Info
        'dati', 'info', 'informazioni', 'voci', 'salvati', 'memorizzati',
        # Question words
        'mio', 'mia', 'miei', 'mie', 'quale', 'quali', 'che', 'hai', 'sai', 'conosci'
    ],
    'pt': [
        # DB/Storage
        'db', 'base de dados', 'local', 'localmente', 'armazenamento', 'armazenar', 'armazenado',
        # Save/Remember
        'salvar', 'salvo', 'salvos', 'lembrar', 'lembra', 'anota', 'anotar', 'guarda', 'guardar',
        # Retrieve/Get
        'pegar', 'buscar', 'recuperar', 'mostrar', 'mostra', 'me d√°', 'obter',
        # Show/List
        'listar', 'lista', 'exibir', 'mostra-me', 'me mostre',
        # Delete/Forget
        'esquecer', 'esquece', 'apagar', 'apaga', 'deletar', 'deleta', 'remover', 'remove',
        # Data/Info
        'dados', 'info', 'informa√ß√£o', 'informa√ß√µes', 'entradas', 'registros', 'salvos',
        # Question words
        'meu', 'minha', 'meus', 'minhas', 'qual', 'quais', 'que', 'tem', 'tens', 'sabe', 'conhece'
    ],
    'nl': [
        'db', 'database', 'lokaal', 'opslag', 'opslaan', 'onthoud', 'haal', 'opgeslagen',
        'vergeet', 'verwijder', 'toon', 'lijst'
    ],
    'pl': [
        'db', 'baza danych', 'lokalnie', 'pamiƒôƒá', 'zapisz', 'zapamiƒôtaj', 'poka≈º', 'zapisane',
        'zapomnij', 'usu≈Ñ', 'lista', 'aktualizuj'
    ],
    'ru': [
        '–±–¥', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–ª–æ–∫–∞–ª—å–Ω–æ', '—Ö—Ä–∞–Ω–∏–ª–∏—â–µ', '—Å–æ—Ö—Ä–∞–Ω–∏', '–∑–∞–ø–æ–º–Ω–∏', '–ø–æ–∫–∞–∂–∏', '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
        '–∑–∞–±—É–¥—å', '—É–¥–∞–ª–∏', '—Å–ø–∏—Å–æ–∫', '–æ–±–Ω–æ–≤–∏'
    ],
    'ja': [
        'db', '„Éá„Éº„Çø„Éô„Éº„Çπ', '„É≠„Éº„Ç´„É´', '„Çπ„Éà„É¨„Éº„Ç∏', '‰øùÂ≠ò', 'Ë¶ö„Åà„Å¶', 'ÂèñÂæó', '‰øùÂ≠ò„Åó„Åü',
        'Âøò„Çå„Å¶', 'ÂâäÈô§', '„É™„Çπ„Éà', 'Êõ¥Êñ∞'
    ],
    'zh': [
        'db', 'Êï∞ÊçÆÂ∫ì', 'Êú¨Âú∞', 'Â≠òÂÇ®', '‰øùÂ≠ò', 'ËÆ∞‰Ωè', 'ÊòæÁ§∫', 'Â∑≤‰øùÂ≠ò',
        'ÂøòËÆ∞', 'Âà†Èô§', 'ÂàóË°®', 'Êõ¥Êñ∞'
    ],
    'ko': [
        'db', 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§', 'Î°úÏª¨', 'Ï†ÄÏû•ÏÜå', 'Ï†ÄÏû•', 'Í∏∞ÏñµÌï¥', 'Î≥¥Ïó¨Ï§ò', 'Ï†ÄÏû•Îêú',
        'ÏûäÏñ¥', 'ÏÇ≠Ï†ú', 'Î™©Î°ù', 'ÏóÖÎç∞Ïù¥Ìä∏'
    ],
    'ar': [
        'db', 'ŸÇÿßÿπÿØÿ© ÿ®ŸäÿßŸÜÿßÿ™', 'ŸÖÿ≠ŸÑŸä', 'ÿ™ÿÆÿ≤ŸäŸÜ', 'ÿßÿ≠ŸÅÿ∏', 'ÿ™ÿ∞ŸÉÿ±', 'ÿ£ÿ∏Ÿáÿ±', 'ŸÖÿ≠ŸÅŸàÿ∏',
        'ÿßŸÜÿ≥Ÿâ', 'ÿßÿ≠ÿ∞ŸÅ', 'ŸÇÿßÿ¶ŸÖÿ©', 'ÿ≠ÿØÿ´'
    ],
    'hi': [
        'db', '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏', '‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø', '‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡§£', '‡§∏‡§π‡•á‡§ú‡•á‡§Ç', '‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç', '‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç', '‡§∏‡§π‡•á‡§ú‡§æ',
        '‡§≠‡•Ç‡§≤ ‡§ú‡§æ‡§ì', '‡§π‡§ü‡§æ‡§è‡§Ç', '‡§∏‡•Ç‡§ö‡•Ä', '‡§Ö‡§¶‡•ç‡§Ø‡§§‡§®'
    ],
    'tr': [
        'db', 'veritabanƒ±', 'yerel', 'depolama', 'kaydet', 'hatƒ±rla', 'g√∂ster', 'kaydedildi',
        'unut', 'sil', 'liste', 'g√ºncelle'
    ],
    'sv': [
        'db', 'databas', 'lokal', 'lagring', 'spara', 'kom ih√•g', 'visa', 'sparat',
        'gl√∂m', 'ta bort', 'lista', 'uppdatera'
    ],
    'da': [
        'db', 'database', 'lokal', 'lagring', 'gem', 'husk', 'vis', 'gemt',
        'glem', 'slet', 'liste', 'opdater'
    ],
    'fi': [
        'db', 'tietokanta', 'paikallinen', 'tallennus', 'tallenna', 'muista', 'n√§yt√§', 'tallennettu',
        'unohda', 'poista', 'lista', 'p√§ivit√§'
    ],
    'no': [
        'db', 'database', 'lokal', 'lagring', 'lagre', 'husk', 'vis', 'lagret',
        'glem', 'slett', 'liste', 'oppdater'
    ]
}


class LocalStorageDetector:
    """Fast keyword detector to trigger Phi-3 intent analysis"""

    def __init__(self):
        """Initialize detector with minimal keyword dictionary"""
        self.keywords = DB_INTENT_KEYWORDS

    def detect_db_intent(self, text: str) -> Tuple[bool, List[str]]:
        """
        Quick check: Does text contain ANY database-related keyword?

        Args:
            text: User input message

        Returns:
            Tuple of (detected, matched_keywords)
            - detected: True if any keyword found
            - matched_keywords: List of keywords that matched
        """
        text_lower = text.lower()
        matched = []

        # Check all languages
        for lang, keywords in self.keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    matched.append(keyword)

        return (len(matched) > 0, matched)


# For testing
if __name__ == '__main__':
    detector = LocalStorageDetector()

    test_cases = [
        # Should trigger
        ("merke dir meine Email ist test@test.com", True),
        ("wie ist meine Telefonnummer?", False),  # No keyword!
        ("zeig mir was in der db gespeichert ist", True),
        ("hole meine Daten aus der Datenbank", True),
        ("save this locally", True),
        ("what's stored in the database?", True),

        # Should NOT trigger
        ("Wie ist das Wetter heute?", False),
        ("Was ist 2+2?", False),
        ("Tell me a joke", False),

        # Potential false positives (Phi-3 will filter)
        ("Was ist eine Datenbank?", True),  # Contains 'datenbank' but educational
        ("Ich habe das gestern in der DB gespeichert", True),  # Past tense
    ]

    print("üß™ Testing Minimal Keyword Detector (v9.0.0)\n")
    print("Note: False positives OK - Phi-3 will filter them!\n")

    for text, should_trigger in test_cases:
        detected, keywords = detector.detect_db_intent(text)
        status = "‚úÖ" if detected == should_trigger else "‚ö†Ô∏è"

        print(f"{status} '{text}'")
        print(f"   Detected: {detected}, Keywords: {keywords}")

        if detected and not should_trigger:
            print(f"   ‚ö†Ô∏è  False positive (Phi-3 will handle)")

        print()

    # Count total keywords
    total = sum(len(kw) for kw in DB_INTENT_KEYWORDS.values())
    print(f"\nüìä Total keywords: {total} ({len(DB_INTENT_KEYWORDS)} languages √ó ~8 keywords)")
    print(f"üöÄ Speedup vs v8.x: ~7.5√ó faster ({total} checks vs 1140 checks)")
